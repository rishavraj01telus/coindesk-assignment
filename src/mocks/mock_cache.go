// Code generated by MockGen. DO NOT EDIT.
// Source: coindesk/cache (interfaces: ICache)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "coindesk/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockICache) GetPrice(arg0 context.Context, arg1 string) (models.Crypto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", arg0, arg1)
	ret0, _ := ret[0].(models.Crypto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockICacheMockRecorder) GetPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockICache)(nil).GetPrice), arg0, arg1)
}

// SetPrice mocks base method.
func (m *MockICache) SetPrice(arg0 context.Context, arg1 models.Crypto) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrice", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrice indicates an expected call of SetPrice.
func (mr *MockICacheMockRecorder) SetPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrice", reflect.TypeOf((*MockICache)(nil).SetPrice), arg0, arg1)
}
